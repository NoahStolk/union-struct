//HintName: ComplexUnion(T1, T2).g.cs
// <auto-generated>
// This code was generated by UnionStruct.
// </auto-generated>

#nullable enable

namespace Tests;

internal partial struct ComplexUnion<T1, T2>
{
	public const global::System.Int32 IntIndex = 0;
	public const global::System.Int32 LongIndex = 1;
	public const global::System.Int32 TCaseIndex = 2;
	public const global::System.Int32 UCaseIndex = 3;
	public const global::System.Int32 UCaseNestedIndex = 4;

	public readonly global::System.Int32 CaseIndex;

	public int? IntData = default!;

	public long? LongData = default!;

	public T1? TCaseData = default!;

	public UCaseCase UCaseData = default!;

	public UCaseNestedCase UCaseNestedData = default!;

	private ComplexUnion(global::System.Int32 caseIndex)
	{
		CaseIndex = caseIndex;
	}

	public bool IsInt => CaseIndex == IntIndex;
	public bool IsLong => CaseIndex == LongIndex;
	public bool IsTCase => CaseIndex == TCaseIndex;
	public bool IsUCase => CaseIndex == UCaseIndex;
	public bool IsUCaseNested => CaseIndex == UCaseNestedIndex;

	public static partial ComplexUnion<T1, T2> Int(
		int? @value
	)
	{
		ComplexUnion<T1, T2> ___factoryReturnValue = new(IntIndex);
		___factoryReturnValue.IntData = @value;
		return ___factoryReturnValue;
	}

	public static partial ComplexUnion<T1, T2> Long(
		long? @value
	)
	{
		ComplexUnion<T1, T2> ___factoryReturnValue = new(LongIndex);
		___factoryReturnValue.LongData = @value;
		return ___factoryReturnValue;
	}

	public static partial ComplexUnion<T1, T2> TCase(
		T1? @value
	)
	{
		ComplexUnion<T1, T2> ___factoryReturnValue = new(TCaseIndex);
		___factoryReturnValue.TCaseData = @value;
		return ___factoryReturnValue;
	}

	public static partial ComplexUnion<T1, T2> UCase(
		Tests.TestGeneric<byte, short>? @value,
		T1? @a,
		T2? @b
	)
	{
		ComplexUnion<T1, T2> ___factoryReturnValue = new(UCaseIndex);
		___factoryReturnValue.UCaseData.Value = @value;
		___factoryReturnValue.UCaseData.A = @a;
		___factoryReturnValue.UCaseData.B = @b;
		return ___factoryReturnValue;
	}

	public static partial ComplexUnion<T1, T2> UCaseNested(
		Tests.ComplexUnion<T1, T2>.TestGenericNested<byte, short>? @value,
		T1? @a,
		T2? @b
	)
	{
		ComplexUnion<T1, T2> ___factoryReturnValue = new(UCaseNestedIndex);
		___factoryReturnValue.UCaseNestedData.Value = @value;
		___factoryReturnValue.UCaseNestedData.A = @a;
		___factoryReturnValue.UCaseNestedData.B = @b;
		return ___factoryReturnValue;
	}

	public void Switch(
		global::System.Action<int?> @int,
		global::System.Action<long?> @long,
		global::System.Action<T1?> @tCase,
		global::System.Action<Tests.TestGeneric<byte, short>?, T1?, T2?> @uCase,
		global::System.Action<Tests.ComplexUnion<T1, T2>.TestGenericNested<byte, short>?, T1?, T2?> @uCaseNested
	)
	{
		switch (CaseIndex)
		{
			case IntIndex: @int.Invoke(IntData); break;
			case LongIndex: @long.Invoke(LongData); break;
			case TCaseIndex: @tCase.Invoke(TCaseData); break;
			case UCaseIndex: @uCase.Invoke(UCaseData.Value, UCaseData.A, UCaseData.B); break;
			case UCaseNestedIndex: @uCaseNested.Invoke(UCaseNestedData.Value, UCaseNestedData.A, UCaseNestedData.B); break;
			default: throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}.");
		}
	}

	public TMatchOut Match<TMatchOut>(
		global::System.Func<int?, TMatchOut> @int,
		global::System.Func<long?, TMatchOut> @long,
		global::System.Func<T1?, TMatchOut> @tCase,
		global::System.Func<Tests.TestGeneric<byte, short>?, T1?, T2?, TMatchOut> @uCase,
		global::System.Func<Tests.ComplexUnion<T1, T2>.TestGenericNested<byte, short>?, T1?, T2?, TMatchOut> @uCaseNested
	)
	{
		return CaseIndex switch
		{
			IntIndex => @int.Invoke(IntData),
			LongIndex => @long.Invoke(LongData),
			TCaseIndex => @tCase.Invoke(TCaseData),
			UCaseIndex => @uCase.Invoke(UCaseData.Value, UCaseData.A, UCaseData.B),
			UCaseNestedIndex => @uCaseNested.Invoke(UCaseNestedData.Value, UCaseNestedData.A, UCaseNestedData.B),
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public override global::System.String ToString()
	{
		return CaseIndex switch
		{
			IntIndex => $"Int {{ Value = {IntData} }}",
			LongIndex => $"Long {{ Value = {LongData} }}",
			TCaseIndex => $"TCase {{ Value = {TCaseData} }}",
			UCaseIndex => $"UCase {{ Value = {UCaseData.Value}, A = {UCaseData.A}, B = {UCaseData.B} }}",
			UCaseNestedIndex => $"UCaseNested {{ Value = {UCaseNestedData.Value}, A = {UCaseNestedData.A}, B = {UCaseNestedData.B} }}",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public struct UCaseCase
	{
		public Tests.TestGeneric<byte, short>? Value;

		public T1? A;

		public T2? B;

	}

	public struct UCaseNestedCase
	{
		public Tests.ComplexUnion<T1, T2>.TestGenericNested<byte, short>? Value;

		public T1? A;

		public T2? B;

	}

}
