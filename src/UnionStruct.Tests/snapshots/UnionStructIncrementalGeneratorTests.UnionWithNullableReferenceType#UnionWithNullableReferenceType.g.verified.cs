//HintName: UnionWithNullableReferenceType.g.cs
// <auto-generated>
// This code was generated by UnionStruct.
// </auto-generated>

#nullable enable

namespace Tests;

internal partial struct UnionWithNullableReferenceType : global::System.IEquatable<UnionWithNullableReferenceType>
{
	public const global::System.Int32 IntIndex = 0;
	public const global::System.Int32 StringIndex = 1;

	public readonly global::System.Int32 CaseIndex;

	public int IntData;

	public string? StringData;

	private UnionWithNullableReferenceType(global::System.Int32 caseIndex)
	{
		CaseIndex = caseIndex;
	}

	public bool IsInt => CaseIndex == IntIndex;
	public bool IsString => CaseIndex == StringIndex;

	public static partial UnionWithNullableReferenceType Int(
		int @value
	)
	{
		UnionWithNullableReferenceType ___factoryReturnValue = new(IntIndex);
		___factoryReturnValue.IntData = @value;
		return ___factoryReturnValue;
	}

	public static partial UnionWithNullableReferenceType String(
		string? @nullableString
	)
	{
		UnionWithNullableReferenceType ___factoryReturnValue = new(StringIndex);
		___factoryReturnValue.StringData = @nullableString;
		return ___factoryReturnValue;
	}

	public void Switch(
		global::System.Action<int> @int,
		global::System.Action<string?> @string
	)
	{
		switch (CaseIndex)
		{
			case IntIndex: @int.Invoke(IntData); break;
			case StringIndex: @string.Invoke(StringData); break;
			default: throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}.");
		}
	}

	public TMatchOut Match<TMatchOut>(
		global::System.Func<int, TMatchOut> @int,
		global::System.Func<string?, TMatchOut> @string
	)
	{
		return CaseIndex switch
		{
			IntIndex => @int.Invoke(IntData),
			StringIndex => @string.Invoke(StringData),
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public override global::System.String ToString()
	{
		return CaseIndex switch
		{
			IntIndex => $"Int {{ Value = {IntData} }}",
			StringIndex => $"String {{ NullableString = {StringData} }}",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public static bool operator !=(UnionWithNullableReferenceType left, UnionWithNullableReferenceType right)
	{
		return !(left == right);
	}

	public static bool operator ==(UnionWithNullableReferenceType left, UnionWithNullableReferenceType right)
	{
		return left.Equals(right);
	}

	public override global::System.Int32 GetHashCode()
	{
		return CaseIndex switch
		{
			IntIndex => unchecked ( IntIndex * -1521134295 + global::System.Collections.Generic.EqualityComparer<int>.Default.GetHashCode(IntData) ),
			StringIndex => unchecked ( StringIndex * -1521134295 + (StringData == null ? 0 : global::System.Collections.Generic.EqualityComparer<string?>.Default.GetHashCode(StringData)) ),
			_ => 2,
		};
	}

	public override global::System.Boolean Equals(global::System.Object? obj)
	{
		return obj is UnionWithNullableReferenceType && Equals((UnionWithNullableReferenceType)obj);
	}

	public global::System.Boolean Equals(UnionWithNullableReferenceType other)
	{
		return CaseIndex == other.CaseIndex && CaseIndex switch
		{
			IntIndex => global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(IntData, other.IntData),
			StringIndex => global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(StringData, other.StringData),
			_ => true,
		};
	}

}
