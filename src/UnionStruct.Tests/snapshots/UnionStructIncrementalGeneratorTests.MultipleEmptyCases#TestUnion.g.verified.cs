//HintName: TestUnion.g.cs
// <auto-generated>
// This code was generated by UnionStruct.
// </auto-generated>

#nullable enable

namespace Tests;

[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)]
internal partial record struct TestUnion
{
	public const global::System.Int32 Empty1Index = 0;
	public const global::System.Int32 Empty2Index = 1;

	[global::System.Runtime.InteropServices.FieldOffset(0)]
	public readonly global::System.Int32 CaseIndex;

	private TestUnion(global::System.Int32 caseIndex)
	{
		CaseIndex = caseIndex;
	}

	public bool IsEmpty1 => CaseIndex == Empty1Index;
	public bool IsEmpty2 => CaseIndex == Empty2Index;

	public static partial TestUnion Empty1(
	)
	{
		TestUnion value = new(Empty1Index);
		return value;
	}

	public static partial TestUnion Empty2(
	)
	{
		TestUnion value = new(Empty2Index);
		return value;
	}

	public void Switch(
		global::System.Action @empty1,
		global::System.Action @empty2
	)
	{
		switch (CaseIndex)
		{
			case Empty1Index: @empty1.Invoke(); break;
			case Empty2Index: @empty2.Invoke(); break;
			default: throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}.");
		}
	}

	public T Match<T>(
		global::System.Func<T> @empty1,
		global::System.Func<T> @empty2
	)
	{
		return CaseIndex switch
		{
			Empty1Index => @empty1.Invoke(),
			Empty2Index => @empty2.Invoke(),
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}.")
		};
	}

	public override global::System.String ToString()
	{
		return CaseIndex switch
		{
			Empty1Index => "Empty1",
			Empty2Index => "Empty2",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}.")
		};
	}

}
