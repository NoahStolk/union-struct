//HintName: UnionWithDisplayNames.g.cs
// <auto-generated>
// This code was generated by UnionStruct.
// </auto-generated>

#nullable enable

namespace Tests;

[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)]
internal partial struct UnionWithDisplayNames : global::System.IEquatable<UnionWithDisplayNames>
{
	public const global::System.Int32 NoneIndex = 0;
	public const global::System.Int32 Unsigned8Index = 1;
	public const global::System.Int32 Unsigned16Index = 2;
	public const global::System.Int32 Unsigned32Index = 3;
	public const global::System.Int32 Unsigned64Index = 4;
	public const global::System.Int32 Signed8Index = 5;
	public const global::System.Int32 Signed16Index = 6;
	public const global::System.Int32 Signed32Index = 7;
	public const global::System.Int32 Signed64Index = 8;

	[global::System.Runtime.InteropServices.FieldOffset(0)]
	public readonly global::System.Int32 CaseIndex;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public byte Unsigned8Data;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public ushort Unsigned16Data;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public uint Unsigned32Data;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public ulong Unsigned64Data;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public sbyte Signed8Data;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public short Signed16Data;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public int Signed32Data;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public long Signed64Data;

	private UnionWithDisplayNames(global::System.Int32 caseIndex)
	{
		CaseIndex = caseIndex;
	}

	public readonly bool IsNone => CaseIndex == NoneIndex;
	public readonly bool IsUnsigned8 => CaseIndex == Unsigned8Index;
	public readonly bool IsUnsigned16 => CaseIndex == Unsigned16Index;
	public readonly bool IsUnsigned32 => CaseIndex == Unsigned32Index;
	public readonly bool IsUnsigned64 => CaseIndex == Unsigned64Index;
	public readonly bool IsSigned8 => CaseIndex == Signed8Index;
	public readonly bool IsSigned16 => CaseIndex == Signed16Index;
	public readonly bool IsSigned32 => CaseIndex == Signed32Index;
	public readonly bool IsSigned64 => CaseIndex == Signed64Index;

	public static global::System.ReadOnlySpan<global::System.Byte> NullTerminatedMemberNames => "None\0Unsigned 8-bit\0Unsigned 16-bit\0Unsigned 32-bit\0Unsigned 64-bit\0Signed 8-bit\0Signed 16-bit\0Signed 32-bit\0Signed 64-bit\0"u8;

	public static partial UnionWithDisplayNames None(
	)
	{
		UnionWithDisplayNames ___factoryReturnValue = new(NoneIndex);
		return ___factoryReturnValue;
	}

	public static partial UnionWithDisplayNames Unsigned8(
		byte @value
	)
	{
		UnionWithDisplayNames ___factoryReturnValue = new(Unsigned8Index);
		___factoryReturnValue.Unsigned8Data = @value;
		return ___factoryReturnValue;
	}

	public static partial UnionWithDisplayNames Unsigned16(
		ushort @value
	)
	{
		UnionWithDisplayNames ___factoryReturnValue = new(Unsigned16Index);
		___factoryReturnValue.Unsigned16Data = @value;
		return ___factoryReturnValue;
	}

	public static partial UnionWithDisplayNames Unsigned32(
		uint @value
	)
	{
		UnionWithDisplayNames ___factoryReturnValue = new(Unsigned32Index);
		___factoryReturnValue.Unsigned32Data = @value;
		return ___factoryReturnValue;
	}

	public static partial UnionWithDisplayNames Unsigned64(
		ulong @value
	)
	{
		UnionWithDisplayNames ___factoryReturnValue = new(Unsigned64Index);
		___factoryReturnValue.Unsigned64Data = @value;
		return ___factoryReturnValue;
	}

	public static partial UnionWithDisplayNames Signed8(
		sbyte @value
	)
	{
		UnionWithDisplayNames ___factoryReturnValue = new(Signed8Index);
		___factoryReturnValue.Signed8Data = @value;
		return ___factoryReturnValue;
	}

	public static partial UnionWithDisplayNames Signed16(
		short @value
	)
	{
		UnionWithDisplayNames ___factoryReturnValue = new(Signed16Index);
		___factoryReturnValue.Signed16Data = @value;
		return ___factoryReturnValue;
	}

	public static partial UnionWithDisplayNames Signed32(
		int @value
	)
	{
		UnionWithDisplayNames ___factoryReturnValue = new(Signed32Index);
		___factoryReturnValue.Signed32Data = @value;
		return ___factoryReturnValue;
	}

	public static partial UnionWithDisplayNames Signed64(
		long @value
	)
	{
		UnionWithDisplayNames ___factoryReturnValue = new(Signed64Index);
		___factoryReturnValue.Signed64Data = @value;
		return ___factoryReturnValue;
	}

	public void Switch(
		global::System.Action @none,
		global::System.Action<byte> @unsigned8,
		global::System.Action<ushort> @unsigned16,
		global::System.Action<uint> @unsigned32,
		global::System.Action<ulong> @unsigned64,
		global::System.Action<sbyte> @signed8,
		global::System.Action<short> @signed16,
		global::System.Action<int> @signed32,
		global::System.Action<long> @signed64
	)
	{
		switch (CaseIndex)
		{
			case NoneIndex: @none.Invoke(); break;
			case Unsigned8Index: @unsigned8.Invoke(Unsigned8Data); break;
			case Unsigned16Index: @unsigned16.Invoke(Unsigned16Data); break;
			case Unsigned32Index: @unsigned32.Invoke(Unsigned32Data); break;
			case Unsigned64Index: @unsigned64.Invoke(Unsigned64Data); break;
			case Signed8Index: @signed8.Invoke(Signed8Data); break;
			case Signed16Index: @signed16.Invoke(Signed16Data); break;
			case Signed32Index: @signed32.Invoke(Signed32Data); break;
			case Signed64Index: @signed64.Invoke(Signed64Data); break;
			default: throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}.");
		}
	}

	public TMatchOut Match<TMatchOut>(
		global::System.Func<TMatchOut> @none,
		global::System.Func<byte, TMatchOut> @unsigned8,
		global::System.Func<ushort, TMatchOut> @unsigned16,
		global::System.Func<uint, TMatchOut> @unsigned32,
		global::System.Func<ulong, TMatchOut> @unsigned64,
		global::System.Func<sbyte, TMatchOut> @signed8,
		global::System.Func<short, TMatchOut> @signed16,
		global::System.Func<int, TMatchOut> @signed32,
		global::System.Func<long, TMatchOut> @signed64
	)
	{
		return CaseIndex switch
		{
			NoneIndex => @none.Invoke(),
			Unsigned8Index => @unsigned8.Invoke(Unsigned8Data),
			Unsigned16Index => @unsigned16.Invoke(Unsigned16Data),
			Unsigned32Index => @unsigned32.Invoke(Unsigned32Data),
			Unsigned64Index => @unsigned64.Invoke(Unsigned64Data),
			Signed8Index => @signed8.Invoke(Signed8Data),
			Signed16Index => @signed16.Invoke(Signed16Data),
			Signed32Index => @signed32.Invoke(Signed32Data),
			Signed64Index => @signed64.Invoke(Signed64Data),
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public override readonly global::System.String ToString()
	{
		return CaseIndex switch
		{
			NoneIndex => "None",
			Unsigned8Index => $"Unsigned 8-bit {{ Value = {Unsigned8Data} }}",
			Unsigned16Index => $"Unsigned 16-bit {{ Value = {Unsigned16Data} }}",
			Unsigned32Index => $"Unsigned 32-bit {{ Value = {Unsigned32Data} }}",
			Unsigned64Index => $"Unsigned 64-bit {{ Value = {Unsigned64Data} }}",
			Signed8Index => $"Signed 8-bit {{ Value = {Signed8Data} }}",
			Signed16Index => $"Signed 16-bit {{ Value = {Signed16Data} }}",
			Signed32Index => $"Signed 32-bit {{ Value = {Signed32Data} }}",
			Signed64Index => $"Signed 64-bit {{ Value = {Signed64Data} }}",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public static global::System.String GetTypeString(global::System.Int32 caseIndex)
	{
		return caseIndex switch
		{
			NoneIndex => "None",
			Unsigned8Index => "Unsigned 8-bit",
			Unsigned16Index => "Unsigned 16-bit",
			Unsigned32Index => "Unsigned 32-bit",
			Unsigned64Index => "Unsigned 64-bit",
			Signed8Index => "Signed 8-bit",
			Signed16Index => "Signed 16-bit",
			Signed32Index => "Signed 32-bit",
			Signed64Index => "Signed 64-bit",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {caseIndex}."),
		};
	}

	public readonly global::System.String GetTypeString()
	{
		return GetTypeString(CaseIndex);
	}

	public static global::System.ReadOnlySpan<global::System.Byte> GetTypeAsUtf8Span(global::System.Int32 caseIndex)
	{
		return caseIndex switch
		{
			NoneIndex => "None"u8,
			Unsigned8Index => "Unsigned 8-bit"u8,
			Unsigned16Index => "Unsigned 16-bit"u8,
			Unsigned32Index => "Unsigned 32-bit"u8,
			Unsigned64Index => "Unsigned 64-bit"u8,
			Signed8Index => "Signed 8-bit"u8,
			Signed16Index => "Signed 16-bit"u8,
			Signed32Index => "Signed 32-bit"u8,
			Signed64Index => "Signed 64-bit"u8,
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {caseIndex}."),
		};
	}

	public readonly global::System.ReadOnlySpan<global::System.Byte> GetTypeAsUtf8Span()
	{
		return GetTypeAsUtf8Span(CaseIndex);
	}

	public static bool operator !=(UnionWithDisplayNames left, UnionWithDisplayNames right)
	{
		return !(left == right);
	}

	public static bool operator ==(UnionWithDisplayNames left, UnionWithDisplayNames right)
	{
		return left.Equals(right);
	}

	public override readonly global::System.Int32 GetHashCode()
	{
		return CaseIndex switch
		{
			NoneIndex => unchecked ( NoneIndex ),
			Unsigned8Index => unchecked ( Unsigned8Index * -1521134295 + global::System.Collections.Generic.EqualityComparer<byte>.Default.GetHashCode(Unsigned8Data) ),
			Unsigned16Index => unchecked ( Unsigned16Index * -1521134295 + global::System.Collections.Generic.EqualityComparer<ushort>.Default.GetHashCode(Unsigned16Data) ),
			Unsigned32Index => unchecked ( Unsigned32Index * -1521134295 + global::System.Collections.Generic.EqualityComparer<uint>.Default.GetHashCode(Unsigned32Data) ),
			Unsigned64Index => unchecked ( Unsigned64Index * -1521134295 + global::System.Collections.Generic.EqualityComparer<ulong>.Default.GetHashCode(Unsigned64Data) ),
			Signed8Index => unchecked ( Signed8Index * -1521134295 + global::System.Collections.Generic.EqualityComparer<sbyte>.Default.GetHashCode(Signed8Data) ),
			Signed16Index => unchecked ( Signed16Index * -1521134295 + global::System.Collections.Generic.EqualityComparer<short>.Default.GetHashCode(Signed16Data) ),
			Signed32Index => unchecked ( Signed32Index * -1521134295 + global::System.Collections.Generic.EqualityComparer<int>.Default.GetHashCode(Signed32Data) ),
			Signed64Index => unchecked ( Signed64Index * -1521134295 + global::System.Collections.Generic.EqualityComparer<long>.Default.GetHashCode(Signed64Data) ),
			_ => 9,
		};
	}

	public override readonly global::System.Boolean Equals(global::System.Object? obj)
	{
		return obj is UnionWithDisplayNames && Equals((UnionWithDisplayNames)obj);
	}

	public readonly global::System.Boolean Equals(UnionWithDisplayNames other)
	{
		return CaseIndex == other.CaseIndex && CaseIndex switch
		{
			NoneIndex => true,
			Unsigned8Index => global::System.Collections.Generic.EqualityComparer<byte>.Default.Equals(Unsigned8Data, other.Unsigned8Data),
			Unsigned16Index => global::System.Collections.Generic.EqualityComparer<ushort>.Default.Equals(Unsigned16Data, other.Unsigned16Data),
			Unsigned32Index => global::System.Collections.Generic.EqualityComparer<uint>.Default.Equals(Unsigned32Data, other.Unsigned32Data),
			Unsigned64Index => global::System.Collections.Generic.EqualityComparer<ulong>.Default.Equals(Unsigned64Data, other.Unsigned64Data),
			Signed8Index => global::System.Collections.Generic.EqualityComparer<sbyte>.Default.Equals(Signed8Data, other.Signed8Data),
			Signed16Index => global::System.Collections.Generic.EqualityComparer<short>.Default.Equals(Signed16Data, other.Signed16Data),
			Signed32Index => global::System.Collections.Generic.EqualityComparer<int>.Default.Equals(Signed32Data, other.Signed32Data),
			Signed64Index => global::System.Collections.Generic.EqualityComparer<long>.Default.Equals(Signed64Data, other.Signed64Data),
			_ => true,
		};
	}

}
