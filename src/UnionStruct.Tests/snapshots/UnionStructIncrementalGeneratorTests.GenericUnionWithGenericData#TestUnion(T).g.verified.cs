//HintName: TestUnion(T).g.cs
// <auto-generated>
// This code was generated by UnionStruct.
// </auto-generated>

#nullable enable

namespace Tests;

internal partial struct TestUnion<T> : global::System.IEquatable<TestUnion<T>>
{
	public const global::System.Int32 CaseCount = 4;

	public const global::System.Int32 IntIndex = 0;
	public const global::System.Int32 LongIndex = 1;
	public const global::System.Int32 TCaseIndex = 2;
	public const global::System.Int32 UCaseIndex = 3;

	public readonly global::System.Int32 CaseIndex;

	public int? IntData;

	public long? LongData;

	public T TCaseData = default!;

	public Tests.TestUnion<T>.TestGeneric<byte, short>? UCaseData;

	private TestUnion(global::System.Int32 caseIndex)
	{
		CaseIndex = caseIndex;
	}

	public readonly bool IsInt => CaseIndex == IntIndex;
	public readonly bool IsLong => CaseIndex == LongIndex;
	public readonly bool IsTCase => CaseIndex == TCaseIndex;
	public readonly bool IsUCase => CaseIndex == UCaseIndex;

	public static global::System.ReadOnlySpan<global::System.Byte> NullTerminatedMemberNames => "Int\0Long\0TCase\0UCase\0"u8;

	public static partial TestUnion<T> Int(
		int? @value
	)
	{
		TestUnion<T> ___factoryReturnValue = new(IntIndex);
		___factoryReturnValue.IntData = @value;
		return ___factoryReturnValue;
	}

	public static partial TestUnion<T> Long(
		long? @value
	)
	{
		TestUnion<T> ___factoryReturnValue = new(LongIndex);
		___factoryReturnValue.LongData = @value;
		return ___factoryReturnValue;
	}

	public static partial TestUnion<T> TCase(
		T @value
	)
	{
		TestUnion<T> ___factoryReturnValue = new(TCaseIndex);
		___factoryReturnValue.TCaseData = @value;
		return ___factoryReturnValue;
	}

	public static partial TestUnion<T> UCase(
		Tests.TestUnion<T>.TestGeneric<byte, short>? @value
	)
	{
		TestUnion<T> ___factoryReturnValue = new(UCaseIndex);
		___factoryReturnValue.UCaseData = @value;
		return ___factoryReturnValue;
	}

	public void Switch(
		global::System.Action<int?> @int,
		global::System.Action<long?> @long,
		global::System.Action<T> @tCase,
		global::System.Action<Tests.TestUnion<T>.TestGeneric<byte, short>?> @uCase
	)
	{
		switch (CaseIndex)
		{
			case IntIndex: @int.Invoke(IntData); break;
			case LongIndex: @long.Invoke(LongData); break;
			case TCaseIndex: @tCase.Invoke(TCaseData); break;
			case UCaseIndex: @uCase.Invoke(UCaseData); break;
			default: throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}.");
		}
	}

	public TMatchOut Match<TMatchOut>(
		global::System.Func<int?, TMatchOut> @int,
		global::System.Func<long?, TMatchOut> @long,
		global::System.Func<T, TMatchOut> @tCase,
		global::System.Func<Tests.TestUnion<T>.TestGeneric<byte, short>?, TMatchOut> @uCase
	)
	{
		return CaseIndex switch
		{
			IntIndex => @int.Invoke(IntData),
			LongIndex => @long.Invoke(LongData),
			TCaseIndex => @tCase.Invoke(TCaseData),
			UCaseIndex => @uCase.Invoke(UCaseData),
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public override readonly global::System.String ToString()
	{
		return CaseIndex switch
		{
			IntIndex => $"Int {{ Value = {IntData} }}",
			LongIndex => $"Long {{ Value = {LongData} }}",
			TCaseIndex => $"TCase {{ Value = {TCaseData} }}",
			UCaseIndex => $"UCase {{ Value = {UCaseData} }}",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public static global::System.String GetTypeString(global::System.Int32 caseIndex)
	{
		return caseIndex switch
		{
			IntIndex => "Int",
			LongIndex => "Long",
			TCaseIndex => "TCase",
			UCaseIndex => "UCase",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {caseIndex}."),
		};
	}

	public readonly global::System.String GetTypeString()
	{
		return GetTypeString(CaseIndex);
	}

	public static global::System.ReadOnlySpan<global::System.Byte> GetTypeAsUtf8Span(global::System.Int32 caseIndex)
	{
		return caseIndex switch
		{
			IntIndex => "Int"u8,
			LongIndex => "Long"u8,
			TCaseIndex => "TCase"u8,
			UCaseIndex => "UCase"u8,
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {caseIndex}."),
		};
	}

	public readonly global::System.ReadOnlySpan<global::System.Byte> GetTypeAsUtf8Span()
	{
		return GetTypeAsUtf8Span(CaseIndex);
	}

	public static bool operator !=(TestUnion<T> left, TestUnion<T> right)
	{
		return !(left == right);
	}

	public static bool operator ==(TestUnion<T> left, TestUnion<T> right)
	{
		return left.Equals(right);
	}

	public override readonly global::System.Int32 GetHashCode()
	{
		return CaseIndex switch
		{
			IntIndex => unchecked ( IntIndex * -1521134295 + (IntData.HasValue ? global::System.Collections.Generic.EqualityComparer<int?>.Default.GetHashCode(IntData.Value) : 0) ),
			LongIndex => unchecked ( LongIndex * -1521134295 + (LongData.HasValue ? global::System.Collections.Generic.EqualityComparer<long?>.Default.GetHashCode(LongData.Value) : 0) ),
			TCaseIndex => unchecked ( TCaseIndex * -1521134295 + (TCaseData == null ? 0 : global::System.Collections.Generic.EqualityComparer<T>.Default.GetHashCode(TCaseData)) ),
			UCaseIndex => unchecked ( UCaseIndex * -1521134295 + (UCaseData.HasValue ? global::System.Collections.Generic.EqualityComparer<Tests.TestUnion<T>.TestGeneric<byte, short>?>.Default.GetHashCode(UCaseData.Value) : 0) ),
			_ => 4,
		};
	}

	public override readonly global::System.Boolean Equals(global::System.Object? obj)
	{
		return obj is TestUnion<T> && Equals((TestUnion<T>)obj);
	}

	public readonly global::System.Boolean Equals(TestUnion<T> other)
	{
		return CaseIndex == other.CaseIndex && CaseIndex switch
		{
			IntIndex => global::System.Collections.Generic.EqualityComparer<int?>.Default.Equals(IntData, other.IntData),
			LongIndex => global::System.Collections.Generic.EqualityComparer<long?>.Default.Equals(LongData, other.LongData),
			TCaseIndex => global::System.Collections.Generic.EqualityComparer<T>.Default.Equals(TCaseData, other.TCaseData),
			UCaseIndex => global::System.Collections.Generic.EqualityComparer<Tests.TestUnion<T>.TestGeneric<byte, short>?>.Default.Equals(UCaseData, other.UCaseData),
			_ => true,
		};
	}

}
