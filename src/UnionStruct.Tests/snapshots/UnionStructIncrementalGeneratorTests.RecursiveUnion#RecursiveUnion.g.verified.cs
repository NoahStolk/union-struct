//HintName: RecursiveUnion.g.cs
// <auto-generated>
// This code was generated by UnionStruct.
// </auto-generated>

#nullable enable

namespace Tests;

[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)]
internal partial struct RecursiveUnion : global::System.IEquatable<RecursiveUnion>
{
	public const global::System.Int32 EmptyIndex = 0;
	public const global::System.Int32 NestedIndex = 1;

	[global::System.Runtime.InteropServices.FieldOffset(0)]
	public readonly global::System.Int32 CaseIndex;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public Tests.NestedUnion NestedData;

	private RecursiveUnion(global::System.Int32 caseIndex)
	{
		CaseIndex = caseIndex;
	}

	public bool IsEmpty => CaseIndex == EmptyIndex;
	public bool IsNested => CaseIndex == NestedIndex;

	public static partial RecursiveUnion Empty(
	)
	{
		RecursiveUnion ___factoryReturnValue = new(EmptyIndex);
		return ___factoryReturnValue;
	}

	public static partial RecursiveUnion Nested(
		Tests.NestedUnion @value
	)
	{
		RecursiveUnion ___factoryReturnValue = new(NestedIndex);
		___factoryReturnValue.NestedData = @value;
		return ___factoryReturnValue;
	}

	public void Switch(
		global::System.Action @empty,
		global::System.Action<Tests.NestedUnion> @nested
	)
	{
		switch (CaseIndex)
		{
			case EmptyIndex: @empty.Invoke(); break;
			case NestedIndex: @nested.Invoke(NestedData); break;
			default: throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}.");
		}
	}

	public TMatchOut Match<TMatchOut>(
		global::System.Func<TMatchOut> @empty,
		global::System.Func<Tests.NestedUnion, TMatchOut> @nested
	)
	{
		return CaseIndex switch
		{
			EmptyIndex => @empty.Invoke(),
			NestedIndex => @nested.Invoke(NestedData),
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public override global::System.String ToString()
	{
		return CaseIndex switch
		{
			EmptyIndex => "Empty",
			NestedIndex => $"Nested {{ Value = {NestedData} }}",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public static bool operator !=(RecursiveUnion left, RecursiveUnion right)
	{
		return !(left == right);
	}

	public static bool operator ==(RecursiveUnion left, RecursiveUnion right)
	{
		return left.Equals(right);
	}

	public override global::System.Int32 GetHashCode()
	{
		return CaseIndex switch
		{
			EmptyIndex => unchecked ( EmptyIndex ),
			NestedIndex => unchecked ( NestedIndex * -1521134295 + global::System.Collections.Generic.EqualityComparer<Tests.NestedUnion>.Default.GetHashCode(NestedData) ),
			_ => 2,
		};
	}

	public override global::System.Boolean Equals(global::System.Object? obj)
	{
		return obj is RecursiveUnion && Equals((RecursiveUnion)obj);
	}

	public global::System.Boolean Equals(RecursiveUnion other)
	{
		return CaseIndex == other.CaseIndex && CaseIndex switch
		{
			EmptyIndex => true,
			NestedIndex => global::System.Collections.Generic.EqualityComparer<Tests.NestedUnion>.Default.Equals(NestedData, other.NestedData),
			_ => true,
		};
	}

}
