//HintName: TestUnion.g.cs
// <auto-generated>
// This code was generated by UnionStruct.
// </auto-generated>

#nullable enable

namespace Tests;

[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)]
internal partial record struct TestUnion
{
	public const global::System.Int32 EmptyIndex = 0;
	public const global::System.Int32 PositionCaseIndex = 1;
	public const global::System.Int32 MultiCaseIndex = 2;

	[global::System.Runtime.InteropServices.FieldOffset(0)]
	public readonly global::System.Int32 CaseIndex;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public System.Numerics.Vector3 PositionCaseData;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public MultiCaseCase MultiCaseData;

	private TestUnion(global::System.Int32 caseIndex)
	{
		CaseIndex = caseIndex;
	}

	public bool IsEmpty => CaseIndex == EmptyIndex;
	public bool IsPositionCase => CaseIndex == PositionCaseIndex;
	public bool IsMultiCase => CaseIndex == MultiCaseIndex;

	public static partial TestUnion Empty(
	)
	{
		TestUnion ___factoryReturnValue = new(EmptyIndex);
		return ___factoryReturnValue;
	}

	public static partial TestUnion PositionCase(
		System.Numerics.Vector3 @position
	)
	{
		TestUnion ___factoryReturnValue = new(PositionCaseIndex);
		___factoryReturnValue.PositionCaseData = @position;
		return ___factoryReturnValue;
	}

	public static partial TestUnion MultiCase(
		System.Numerics.Vector3 @position,
		System.Numerics.Vector3 @velocity
	)
	{
		TestUnion ___factoryReturnValue = new(MultiCaseIndex);
		___factoryReturnValue.MultiCaseData.Position = @position;
		___factoryReturnValue.MultiCaseData.Velocity = @velocity;
		return ___factoryReturnValue;
	}

	public void Switch(
		global::System.Action @empty,
		global::System.Action<System.Numerics.Vector3> @positionCase,
		global::System.Action<System.Numerics.Vector3, System.Numerics.Vector3> @multiCase
	)
	{
		switch (CaseIndex)
		{
			case EmptyIndex: @empty.Invoke(); break;
			case PositionCaseIndex: @positionCase.Invoke(PositionCaseData); break;
			case MultiCaseIndex: @multiCase.Invoke(MultiCaseData.Position, MultiCaseData.Velocity); break;
			default: throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}.");
		}
	}

	public TMatchOut Match<TMatchOut>(
		global::System.Func<TMatchOut> @empty,
		global::System.Func<System.Numerics.Vector3, TMatchOut> @positionCase,
		global::System.Func<System.Numerics.Vector3, System.Numerics.Vector3, TMatchOut> @multiCase
	)
	{
		return CaseIndex switch
		{
			EmptyIndex => @empty.Invoke(),
			PositionCaseIndex => @positionCase.Invoke(PositionCaseData),
			MultiCaseIndex => @multiCase.Invoke(MultiCaseData.Position, MultiCaseData.Velocity),
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public override global::System.String ToString()
	{
		return CaseIndex switch
		{
			EmptyIndex => "Empty",
			PositionCaseIndex => PositionCaseData.ToString() ?? string.Empty,
			MultiCaseIndex => $"MultiCase {{ Position = {MultiCaseData.Position}, Velocity = {MultiCaseData.Velocity} }}",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public struct MultiCaseCase
	{
		public System.Numerics.Vector3 Position;

		public System.Numerics.Vector3 Velocity;

	}

}
