//HintName: RootUnion.g.cs
// <auto-generated>
// This code was generated by UnionStruct.
// </auto-generated>

#nullable enable

namespace Tests;

[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)]
internal partial struct RootUnion : global::System.IEquatable<RootUnion>
{
	public const global::System.Int32 CaseCount = 2;

	public const global::System.Int32 EmptyIndex = 0;
	public const global::System.Int32 NestedCaseIndex = 1;

	[global::System.Runtime.InteropServices.FieldOffset(0)]
	public readonly global::System.Int32 CaseIndex;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public Tests.NestedUnion NestedCaseData;

	private RootUnion(global::System.Int32 caseIndex)
	{
		CaseIndex = caseIndex;
	}

	public readonly bool IsEmpty => CaseIndex == EmptyIndex;
	public readonly bool IsNestedCase => CaseIndex == NestedCaseIndex;

	public static global::System.ReadOnlySpan<global::System.Byte> NullTerminatedMemberNames => "Empty\0NestedCase\0"u8;

	public static partial RootUnion Empty(
	)
	{
		RootUnion ___factoryReturnValue = new(EmptyIndex);
		return ___factoryReturnValue;
	}

	public static partial RootUnion NestedCase(
		Tests.NestedUnion @value
	)
	{
		RootUnion ___factoryReturnValue = new(NestedCaseIndex);
		___factoryReturnValue.NestedCaseData = @value;
		return ___factoryReturnValue;
	}

	public void Switch(
		global::System.Action @empty,
		global::System.Action<Tests.NestedUnion> @nestedCase
	)
	{
		switch (CaseIndex)
		{
			case EmptyIndex: @empty.Invoke(); break;
			case NestedCaseIndex: @nestedCase.Invoke(NestedCaseData); break;
			default: throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}.");
		}
	}

	public TMatchOut Match<TMatchOut>(
		global::System.Func<TMatchOut> @empty,
		global::System.Func<Tests.NestedUnion, TMatchOut> @nestedCase
	)
	{
		return CaseIndex switch
		{
			EmptyIndex => @empty.Invoke(),
			NestedCaseIndex => @nestedCase.Invoke(NestedCaseData),
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public override readonly global::System.String ToString()
	{
		return CaseIndex switch
		{
			EmptyIndex => "Empty",
			NestedCaseIndex => $"NestedCase {{ Value = {NestedCaseData} }}",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public static global::System.String GetTypeString(global::System.Int32 caseIndex)
	{
		return caseIndex switch
		{
			EmptyIndex => "Empty",
			NestedCaseIndex => "NestedCase",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {caseIndex}."),
		};
	}

	public readonly global::System.String GetTypeString()
	{
		return GetTypeString(CaseIndex);
	}

	public static global::System.ReadOnlySpan<global::System.Byte> GetTypeAsUtf8Span(global::System.Int32 caseIndex)
	{
		return caseIndex switch
		{
			EmptyIndex => "Empty"u8,
			NestedCaseIndex => "NestedCase"u8,
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {caseIndex}."),
		};
	}

	public readonly global::System.ReadOnlySpan<global::System.Byte> GetTypeAsUtf8Span()
	{
		return GetTypeAsUtf8Span(CaseIndex);
	}

	public static bool operator !=(RootUnion left, RootUnion right)
	{
		return !(left == right);
	}

	public static bool operator ==(RootUnion left, RootUnion right)
	{
		return left.Equals(right);
	}

	public override readonly global::System.Int32 GetHashCode()
	{
		return CaseIndex switch
		{
			EmptyIndex => unchecked ( EmptyIndex ),
			NestedCaseIndex => unchecked ( NestedCaseIndex * -1521134295 + global::System.Collections.Generic.EqualityComparer<Tests.NestedUnion>.Default.GetHashCode(NestedCaseData) ),
			_ => 2,
		};
	}

	public override readonly global::System.Boolean Equals(global::System.Object? obj)
	{
		return obj is RootUnion && Equals((RootUnion)obj);
	}

	public readonly global::System.Boolean Equals(RootUnion other)
	{
		return CaseIndex == other.CaseIndex && CaseIndex switch
		{
			EmptyIndex => true,
			NestedCaseIndex => global::System.Collections.Generic.EqualityComparer<Tests.NestedUnion>.Default.Equals(NestedCaseData, other.NestedCaseData),
			_ => true,
		};
	}

}
