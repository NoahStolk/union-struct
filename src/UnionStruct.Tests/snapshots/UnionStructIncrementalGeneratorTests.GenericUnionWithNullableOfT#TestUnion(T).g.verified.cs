//HintName: TestUnion(T).g.cs
// <auto-generated>
// This code was generated by UnionStruct.
// </auto-generated>

#nullable enable

namespace Tests;

internal partial struct TestUnion<T> : global::System.IEquatable<TestUnion<T>>
{
	public const global::System.Int32 EmptyIndex = 0;
	public const global::System.Int32 NullableIndex = 1;

	public readonly global::System.Int32 CaseIndex;

	public T? NullableData;

	private TestUnion(global::System.Int32 caseIndex)
	{
		CaseIndex = caseIndex;
	}

	public readonly bool IsEmpty => CaseIndex == EmptyIndex;
	public readonly bool IsNullable => CaseIndex == NullableIndex;

	public static global::System.ReadOnlySpan<global::System.Byte> NullTerminatedMemberNames => "Empty\0Nullable\0"u8;

	public static partial TestUnion<T> Empty(
	)
	{
		TestUnion<T> ___factoryReturnValue = new(EmptyIndex);
		return ___factoryReturnValue;
	}

	public static partial TestUnion<T> Nullable(
		T? @value
	)
	{
		TestUnion<T> ___factoryReturnValue = new(NullableIndex);
		___factoryReturnValue.NullableData = @value;
		return ___factoryReturnValue;
	}

	public void Switch(
		global::System.Action @empty,
		global::System.Action<T?> @nullable
	)
	{
		switch (CaseIndex)
		{
			case EmptyIndex: @empty.Invoke(); break;
			case NullableIndex: @nullable.Invoke(NullableData); break;
			default: throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}.");
		}
	}

	public TMatchOut Match<TMatchOut>(
		global::System.Func<TMatchOut> @empty,
		global::System.Func<T?, TMatchOut> @nullable
	)
	{
		return CaseIndex switch
		{
			EmptyIndex => @empty.Invoke(),
			NullableIndex => @nullable.Invoke(NullableData),
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public override global::System.String ToString()
	{
		return CaseIndex switch
		{
			EmptyIndex => "Empty",
			NullableIndex => $"Nullable {{ Value = {NullableData} }}",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public static global::System.String GetTypeString(global::System.Int32 caseIndex)
	{
		return caseIndex switch
		{
			EmptyIndex => "Empty",
			NullableIndex => "Nullable",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {caseIndex}."),
		};
	}

	public global::System.String GetTypeString()
	{
		return GetTypeString(CaseIndex);
	}

	public static global::System.ReadOnlySpan<global::System.Byte> GetTypeAsUtf8Span(global::System.Int32 caseIndex)
	{
		return caseIndex switch
		{
			EmptyIndex => "Empty"u8,
			NullableIndex => "Nullable"u8,
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {caseIndex}."),
		};
	}

	public global::System.ReadOnlySpan<global::System.Byte> GetTypeAsUtf8Span()
	{
		return GetTypeAsUtf8Span(CaseIndex);
	}

	public static bool operator !=(TestUnion<T> left, TestUnion<T> right)
	{
		return !(left == right);
	}

	public static bool operator ==(TestUnion<T> left, TestUnion<T> right)
	{
		return left.Equals(right);
	}

	public override global::System.Int32 GetHashCode()
	{
		return CaseIndex switch
		{
			EmptyIndex => unchecked ( EmptyIndex ),
			NullableIndex => unchecked ( NullableIndex * -1521134295 + (NullableData.HasValue ? global::System.Collections.Generic.EqualityComparer<T?>.Default.GetHashCode(NullableData.Value) : 0) ),
			_ => 2,
		};
	}

	public override global::System.Boolean Equals(global::System.Object? obj)
	{
		return obj is TestUnion<T> && Equals((TestUnion<T>)obj);
	}

	public global::System.Boolean Equals(TestUnion<T> other)
	{
		return CaseIndex == other.CaseIndex && CaseIndex switch
		{
			EmptyIndex => true,
			NullableIndex => global::System.Collections.Generic.EqualityComparer<T?>.Default.Equals(NullableData, other.NullableData),
			_ => true,
		};
	}

}
