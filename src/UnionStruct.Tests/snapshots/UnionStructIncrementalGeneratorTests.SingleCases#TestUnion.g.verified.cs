//HintName: TestUnion.g.cs
// <auto-generated>
// This code was generated by UnionStruct.
// </auto-generated>

#nullable enable

namespace Tests;

[global::System.Runtime.InteropServices.StructLayout(global::System.Runtime.InteropServices.LayoutKind.Explicit)]
internal partial struct TestUnion : global::System.IEquatable<TestUnion>
{
	public const global::System.Int32 CaseCount = 3;

	public const global::System.Int32 AngleCaseIndex = 0;
	public const global::System.Int32 PositionCaseIndex = 1;
	public const global::System.Int32 RotationCaseIndex = 2;

	[global::System.Runtime.InteropServices.FieldOffset(0)]
	public readonly global::System.Int32 CaseIndex;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public float AngleCaseData;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public System.Numerics.Vector3 PositionCaseData;

	[global::System.Runtime.InteropServices.FieldOffset(4)]
	public System.Numerics.Quaternion RotationCaseData;

	private TestUnion(global::System.Int32 caseIndex)
	{
		CaseIndex = caseIndex;
	}

	public readonly bool IsAngleCase => CaseIndex == AngleCaseIndex;
	public readonly bool IsPositionCase => CaseIndex == PositionCaseIndex;
	public readonly bool IsRotationCase => CaseIndex == RotationCaseIndex;

	public static global::System.ReadOnlySpan<global::System.Byte> NullTerminatedMemberNames => "AngleCase\0PositionCase\0RotationCase\0"u8;

	public static partial TestUnion AngleCase(
		float @angle
	)
	{
		TestUnion ___factoryReturnValue = new(AngleCaseIndex);
		___factoryReturnValue.AngleCaseData = @angle;
		return ___factoryReturnValue;
	}

	public static partial TestUnion PositionCase(
		System.Numerics.Vector3 @position
	)
	{
		TestUnion ___factoryReturnValue = new(PositionCaseIndex);
		___factoryReturnValue.PositionCaseData = @position;
		return ___factoryReturnValue;
	}

	public static partial TestUnion RotationCase(
		System.Numerics.Quaternion @rotation
	)
	{
		TestUnion ___factoryReturnValue = new(RotationCaseIndex);
		___factoryReturnValue.RotationCaseData = @rotation;
		return ___factoryReturnValue;
	}

	public void Switch(
		global::System.Action<float> @angleCase,
		global::System.Action<System.Numerics.Vector3> @positionCase,
		global::System.Action<System.Numerics.Quaternion> @rotationCase
	)
	{
		switch (CaseIndex)
		{
			case AngleCaseIndex: @angleCase.Invoke(AngleCaseData); break;
			case PositionCaseIndex: @positionCase.Invoke(PositionCaseData); break;
			case RotationCaseIndex: @rotationCase.Invoke(RotationCaseData); break;
			default: throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}.");
		}
	}

	public TMatchOut Match<TMatchOut>(
		global::System.Func<float, TMatchOut> @angleCase,
		global::System.Func<System.Numerics.Vector3, TMatchOut> @positionCase,
		global::System.Func<System.Numerics.Quaternion, TMatchOut> @rotationCase
	)
	{
		return CaseIndex switch
		{
			AngleCaseIndex => @angleCase.Invoke(AngleCaseData),
			PositionCaseIndex => @positionCase.Invoke(PositionCaseData),
			RotationCaseIndex => @rotationCase.Invoke(RotationCaseData),
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public override readonly global::System.String ToString()
	{
		return CaseIndex switch
		{
			AngleCaseIndex => $"AngleCase {{ Angle = {AngleCaseData} }}",
			PositionCaseIndex => $"PositionCase {{ Position = {PositionCaseData} }}",
			RotationCaseIndex => $"RotationCase {{ Rotation = {RotationCaseData} }}",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {CaseIndex}."),
		};
	}

	public static global::System.String GetTypeString(global::System.Int32 caseIndex)
	{
		return caseIndex switch
		{
			AngleCaseIndex => "AngleCase",
			PositionCaseIndex => "PositionCase",
			RotationCaseIndex => "RotationCase",
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {caseIndex}."),
		};
	}

	public readonly global::System.String GetTypeString()
	{
		return GetTypeString(CaseIndex);
	}

	public static global::System.ReadOnlySpan<global::System.Byte> GetTypeAsUtf8Span(global::System.Int32 caseIndex)
	{
		return caseIndex switch
		{
			AngleCaseIndex => "AngleCase"u8,
			PositionCaseIndex => "PositionCase"u8,
			RotationCaseIndex => "RotationCase"u8,
			_ => throw new global::System.Diagnostics.UnreachableException($"Invalid case index: {caseIndex}."),
		};
	}

	public readonly global::System.ReadOnlySpan<global::System.Byte> GetTypeAsUtf8Span()
	{
		return GetTypeAsUtf8Span(CaseIndex);
	}

	public static bool operator !=(TestUnion left, TestUnion right)
	{
		return !(left == right);
	}

	public static bool operator ==(TestUnion left, TestUnion right)
	{
		return left.Equals(right);
	}

	public override readonly global::System.Int32 GetHashCode()
	{
		return CaseIndex switch
		{
			AngleCaseIndex => unchecked ( AngleCaseIndex * -1521134295 + global::System.Collections.Generic.EqualityComparer<float>.Default.GetHashCode(AngleCaseData) ),
			PositionCaseIndex => unchecked ( PositionCaseIndex * -1521134295 + global::System.Collections.Generic.EqualityComparer<System.Numerics.Vector3>.Default.GetHashCode(PositionCaseData) ),
			RotationCaseIndex => unchecked ( RotationCaseIndex * -1521134295 + global::System.Collections.Generic.EqualityComparer<System.Numerics.Quaternion>.Default.GetHashCode(RotationCaseData) ),
			_ => 3,
		};
	}

	public override readonly global::System.Boolean Equals(global::System.Object? obj)
	{
		return obj is TestUnion && Equals((TestUnion)obj);
	}

	public readonly global::System.Boolean Equals(TestUnion other)
	{
		return CaseIndex == other.CaseIndex && CaseIndex switch
		{
			AngleCaseIndex => global::System.Collections.Generic.EqualityComparer<float>.Default.Equals(AngleCaseData, other.AngleCaseData),
			PositionCaseIndex => global::System.Collections.Generic.EqualityComparer<System.Numerics.Vector3>.Default.Equals(PositionCaseData, other.PositionCaseData),
			RotationCaseIndex => global::System.Collections.Generic.EqualityComparer<System.Numerics.Quaternion>.Default.Equals(RotationCaseData, other.RotationCaseData),
			_ => true,
		};
	}

}
